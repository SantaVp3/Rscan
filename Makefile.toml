[config]
default_to_workspace = false

[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[tasks.default]
alias = "build"

[tasks.build]
description = "Build the project for current platform"
command = "cargo"
args = ["build", "--release"]

[tasks.build-all-platforms]
description = "Build for all supported platforms"
dependencies = [
    "build-windows-x64",
    "build-windows-x86",
    "build-linux-x64",
    "build-linux-arm64",
    "build-macos-x64",
    "build-macos-arm64"
]

[tasks.build-windows-x64]
description = "Build for Windows x64"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "x86_64-pc-windows-msvc"
]

[tasks.build-windows-x86]
description = "Build for Windows x86"
command = "cargo"
args = [
    "build", 
    "--release",
    "--target", "i686-pc-windows-msvc"
]

[tasks.build-linux-x64]
description = "Build for Linux x64"
command = "cargo"
args = [
    "build",
    "--release", 
    "--target", "x86_64-unknown-linux-gnu"
]

[tasks.build-linux-arm64]
description = "Build for Linux ARM64"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "aarch64-unknown-linux-gnu"
]

[tasks.build-macos-x64]
description = "Build for macOS Intel"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "x86_64-apple-darwin"
]

[tasks.build-macos-arm64]  
description = "Build for macOS Apple Silicon"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "aarch64-apple-darwin"
]

[tasks.install-targets]
description = "Install cross-compilation targets"
script = '''
rustup target add x86_64-pc-windows-msvc
rustup target add i686-pc-windows-msvc
rustup target add x86_64-pc-windows-gnu
rustup target add i686-pc-windows-gnu
rustup target add x86_64-unknown-linux-gnu
rustup target add aarch64-unknown-linux-gnu
rustup target add x86_64-apple-darwin
rustup target add aarch64-apple-darwin
'''

[tasks.test]
description = "Run tests"
command = "cargo"
args = ["test"]

[tasks.test-all]
description = "Run all tests including integration tests"
command = "cargo"
args = ["test", "--", "--test-threads=1"]

[tasks.check]
description = "Check code without building"
command = "cargo"
args = ["check"]

[tasks.clippy]
description = "Run clippy linter"
command = "cargo"
args = ["clippy", "--", "-D", "warnings"]

[tasks.format]
description = "Format code"
command = "cargo"
args = ["fmt"]

[tasks.clean]
description = "Clean build artifacts"
command = "cargo"
args = ["clean"]

[tasks.package]
description = "Package binaries for distribution"
dependencies = ["build-all-platforms"]
script = '''
#!/bin/bash
set -e

# Create distribution directory
mkdir -p dist

# Package Windows builds
if [ -f "target/x86_64-pc-windows-msvc/release/rscan.exe" ]; then
    cp target/x86_64-pc-windows-msvc/release/rscan.exe dist/rscan-windows-x64.exe
fi

if [ -f "target/i686-pc-windows-msvc/release/rscan.exe" ]; then
    cp target/i686-pc-windows-msvc/release/rscan.exe dist/rscan-windows-x86.exe
fi

# Package Linux builds
if [ -f "target/x86_64-unknown-linux-gnu/release/rscan" ]; then
    cp target/x86_64-unknown-linux-gnu/release/rscan dist/rscan-linux-x64
fi

if [ -f "target/aarch64-unknown-linux-gnu/release/rscan" ]; then
    cp target/aarch64-unknown-linux-gnu/release/rscan dist/rscan-linux-arm64
fi

# Package macOS builds
if [ -f "target/x86_64-apple-darwin/release/rscan" ]; then
    cp target/x86_64-apple-darwin/release/rscan dist/rscan-macos-x64
fi

if [ -f "target/aarch64-apple-darwin/release/rscan" ]; then
    cp target/aarch64-apple-darwin/release/rscan dist/rscan-macos-arm64
fi

echo "Packaging complete. Binaries are in the dist/ directory."
'''

[tasks.docker-build]
description = "Build Docker image"
command = "docker"
args = ["build", "-t", "rscan:latest", "."]

[tasks.release]
description = "Create a release build with optimizations"
command = "cargo"
args = [
    "build", 
    "--release",
    "--features", "vendored-openssl"
]

# Windows specific tasks
[tasks.build-windows-gnu-x64]
description = "Build for Windows x64 with MinGW"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "x86_64-pc-windows-gnu"
]

[tasks.build-windows-gnu-x86]
description = "Build for Windows x86 with MinGW"
command = "cargo"
args = [
    "build",
    "--release", 
    "--target", "i686-pc-windows-gnu"
]

# Linux specific tasks
[tasks.build-linux-musl]
description = "Build static Linux binary with musl"
command = "cargo"
args = [
    "build",
    "--release",
    "--target", "x86_64-unknown-linux-musl"
]

[tasks.install-musl-target]
description = "Install musl target for static linking"
script = '''
rustup target add x86_64-unknown-linux-musl
''' 