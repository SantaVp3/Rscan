---
description: 
globs: 
alwaysApply: true
---
## Rust 项目通用规范 

**最后更新时间: 2025年6月28日**

### 描述 (Description)
本规则集专为在中文环境下进行本地开发的 Rust 项目定制。它旨在建立一套清晰、统一、**极致严格**的开发标准，强制要求中文注释、规范依赖引入、确保信息来源可靠，并强调实现的彻底性与完整性。**此版本的最核心特点是：完全禁止在任何代码（包括测试代码）中使用模拟数据或近似实现。**

### 技术栈 (Technology Stack)
- **Rust Edition**: 采用最新的稳定版 Rust Edition 2024。
- **依赖管理 (Dependency Management)**:
    - **工具**: 使用 `Cargo` 作为官方的项目和依赖管理工具。
    - **依赖检查流程**: 在 `Cargo.toml` 文件中添加任何新的依赖（Crate）之前，**必须严格执行以下两步检查流程**:
        1.  **第一步：在 `crates.io` 搜索发现**。访问官方仓库 [crates.io](mdc:https:/crates.io)，使用关键词进行搜索，并可结合下载量、最近更新等排序条件进行初步筛选。将所有相关的搜索结果进行评估后选定最适合当前项目的crate。
            -   搜索示例: `https://crates.io/search?q={搜索关键词}&sort=recent-updates`
        2.  **第二步：在 `docs.rs` 深入评估**。从 `crates.io` 上选定的 Crate 页面，点击其文档链接进入 `docs.rs`。在此仔细阅读其文档，评估其 API 设计是否清晰、文档示例是否充分可用、版本是否稳定，以此作为是否采用的最终判断依据。
    - **安全审计**: 可选，但建议定期使用 `cargo audit` 检查项目依赖是否存在已知的安全漏洞。
- **本地构建与检查 (Local Build & Check)**:
    - 在提交或合并代码前，开发者**必须**在本地运行以下命令以确保质量：
        1.  `cargo check`: 快速检查编译错误。
        2.  `cargo fmt`: 自动格式化所有代码。
        3.  `cargo clippy -- -D warnings`: 运行 Clippy 进行代码分析，并将所有警告视为错误处理。
        4.  `cargo test`: 运行所有测试。
- **脚本 (Scripting)**:
    - 推荐使用 `just` 或 `cargo-make` 来定义和管理项目脚本。这比 `Bash` 脚本在 Windows 环境下具有更好的兼容性和易用性。

### 代码风格 (Code Style)
- **格式化 (Formatting)**:
    - **强制使用 `rustfmt`**: 所有代码都必须使用 `rustfmt` 进行格式化。项目应包含 `rustfmt.toml` 配置文件以统一团队风格。
- **命名规范 (Naming Conventions)**:
    - 遵循 Rust API 指南的[命名约定](mdc:https:/rust-lang.github.io/api-guidelines/naming.html)（例如，类型为 `UpperCamelCase`，函数/变量为 `snake_case`）。
- **注释与文档 (Comments & Documentation)**:
    - **强制中文注释**:
        - **所有**代码注释，包括文档注释 (`///`) 和行注释 (`//`)，**必须**使用**中文**编写。
        - 文档注释 (`///`)：必须为所有 `pub` (公共) 的函数、结构体、枚举和模块编写。内容需清晰描述其**功能、参数、返回值、可能的 panic 情况，并提供中文使用示例**。
        - 行注释 (`//`)：用于解释复杂的内部逻辑、算法步骤或“魔法数字”的含义。

### 项目结构 (Project Structure)
- **模块化 (Modularization)**:
    - 遵循 Rust 的模块化系统，将相关功能组织在清晰的模块中。
    - `src/lib.rs` 用于库定义，`src/main.rs` 用于二进制入口。
- **目录结构 (Directory Layout)**:
    - `src/`: 存放所有源代码。
    - `tests/`: 存放集成测试。
    - `examples/`: 存放用法示例代码。
    - `data/` 或 `assets/`: 存放项目所需的静态资源。
    - `.cargo/config.toml`: 用于定义项目本地的 Cargo 配置。

### 通用开发原则 (General Development Principles)
- **实现的彻底性 (Thoroughness of Implementation)**:
    - **禁止临时占位符**: 代码中**不得**包含 `// TODO:`、`// FIXME:` 或其他任何形式的占位符注释。所有提交的功能必须是完整、可用且经过验证的最终版本。
    - **禁止近似与模拟**: **严禁在任何代码（包括生产与测试代码）中使用近似法或模拟数据**。所有功能和测试都必须根据实际需求和数据结构进行彻底、精确的实现。
- **事实核查与信息来源**:
    - **对于任何不理解、不清楚的技术点或问题，必须主动使用网络进行搜索查证。**
    - **严禁杜撰、猜测或捏造不存在的事实及技术实现。**
    - **首选信息来源包括**: 官方文档、`GitHub` 上的源代码和讨论、`Stack Overflow`、官方或高质量社区的 `Discord` 频道，以及 `Google` 搜索结果中的权威技术博客。
    - **目标**: 务必确保所采纳和使用的信息是最精准、最可靠的。
- **可测试性 (Testability)**:
    - **测试数据真实性**: 所有测试都必须使用确定性的、真实的输入数据进行构建，**严禁使用任何形式的模拟（Mocking）或伪造数据**。测试用例应直接实例化项目中的真实结构体并提供合法的、边界清晰的输入值来进行断言。
    - 为核心业务逻辑编写单元测试。
    - 为公共 API 或程序主要功能编写集成测试。
- **错误处理 (Error Handling)**:
    - **杜绝 `unwrap()` / `expect()`**: 在业务逻辑代码中严禁使用 `.unwrap()` 或 `.expect()`。应使用 `Result<T, E>` 和 `match`、`if let` 等模式进行健壮的错误处理。
    - **推荐工具**: 使用 `thiserror` 库来定义清晰的、自定义的错误类型。
- **DRY (Don't Repeat Yourself)**:
    - 通过函数、宏或泛型来避免代码重复。
- **拥抱生态 (Leverage the Ecosystem)**:
    - 在确认文档质量（遵循上一节的检查流程）后，优先使用 [crates.io](mdc:https:/crates.io) 上成熟的库来解决问题，避免重复造轮子。
- **安全 (Security)**:
    - 严禁使用 `unsafe` 关键字，除非有绝对必要、充分理由并经过团队审查。若使用，必须在其代码块上方用中文注释详细说明其**必要性**和**如何保证其安全性**。

### 响应语言 (Response Language)
- **代码内部**: 所有注释**必须**为中文。
- **版本控制**: `git commit` 的提交信息**必须**使用中文，并遵循一定的格式（如：`类型: 简要描述`，例如 `修复: 修复了用户无法登录的问题`）。

- **用户交互**: 若项目包含用户界面或命令行输出，与最终用户的交互信息**必须**是中文。